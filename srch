#!/usr/bin/env ruby

require_relative "ndex"
require_relative "session"
require "colorize"

module Srch
  class << self
    extend NdexPlugin

    def all(pattern)
      find_logfiles(pattern)
    end

    def latest(pattern)
      [find_logfiles(pattern).last]
    end
    
    def text(pattern)
      matches = {}

      # Make this faster by relying upon the_silver_searcher (much faster)
      # to determine candidate files with possible matches, and skipping HTML
      # parsing if the file isn't contained in ag results
      filter = {}
      `ag -l "#{pattern}"`.split("\n").each do |path|
        filter[path.downcase] = true
      end

      sessions.each do |session|
        session.logfiles.each do |logfile|
          if filter[logfile.path.downcase]
            lines = logfile.find_lines(pattern)
            matches[logfile] = lines unless lines.empty?
          else
          end
        end
      end

      matches
    end

    def sessions
      return @sessions if @sessions
      @sessions = []
      Ndex.subfolder_ids.sort.map do |id|
        @sessions << Session.new(id)
        logfile = @sessions.last.logfiles.last
      end
      @sessions
    end

    def find_logfiles(pattern)
      sessions.reduce([]) do |matches, session|
        matches.concat(session.matching_logfiles(pattern))
      end
    end
  end
end

pattern = ARGV[0]
command = ARGV[1] || "list"
selection = ARGV[2] || "all"

ids = Ndex.subfolder_ids
puts "Searching #{Ndex.subfolder_prefix} #{ids.min} through #{ids.max} for \"#{pattern}\""

if command == "list"
  puts Srch.send(selection, pattern).reduce("") { |s, l| "#{s}\n#{l.pp}" }
elsif command == "text"
  width = `tput cols`.to_i

  matches = Srch.text(pattern).each_pair do |logfile, lines| 
    puts logfile.pp.ljust(width).black.on_white

    odd_line = true
    lines.each do |line|
      print_str = "#{line}\n\n"

      if odd_line
        puts print_str
      else
        puts print_str.on_black
      end

      odd_line = !odd_line
    end
  end
else
  results = Srch.send(selection, pattern)
  puts "Executing commands:"
  results.each { |filepath| puts "  #{command} \"#{filepath}\"" }
  results.each do |filepath|
    ret = `#{command} \"#{filepath}\"`
    puts ret if ret && ret != ""
  end
end
