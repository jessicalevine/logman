#!/usr/bin/env ruby
require "bundler"
Bundler.setup

require_relative "ndex"
require "colorize"
require "thor"

module Srch
  class << self
    extend NdexPlugin
    
    def text(pattern, recent)
      recent = recent || Ndex.max_id
      matches = {}

      # Make this faster by relying upon the_silver_searcher (much faster)
      # to determine candidate files with possible matches, and skipping HTML
      # parsing if the file isn't contained in ag results
      filter = {}
      `ag -l "#{pattern}"`.split("\n").each do |path|
        filter[path.downcase] = true
      end

      Ndex.sessions.each do |session|
        if session.subfolder_id > Ndex.max_id - recent
          session.logfiles.each do |logfile|
            if filter[logfile.path.downcase]
              lines = logfile.find_lines(pattern)
              matches[logfile] = lines unless lines.empty?
            else
            end
          end
        end
      end

      matches
    end

    def print_matching_logfiles(pattern, recent)
      recent = recent || Ndex.max_id
      Ndex.sessions.each do |session|
        if session.subfolder_id > Ndex.max_id - recent
          session.matching_logfiles(pattern).each { |lf| puts lf.pp }
        end
      end
    end

    def find_matching_logfiles(pattern)
      Ndex.sessions.reduce([]) do |matches, session|
        matches.concat(session.matching_logfiles(pattern))
      end
    end
  end
end

def print_header(action, desc, min=nil, max=nil)
  min = min || Ndex.min_id
  max = max || Ndex.max_id
  puts ">>>>> #{action} #{Ndex.subfolder_prefix} #{min} through #{max} #{desc}".cyan.on_black
end

def width
  @width = @width || `tput cols`.to_i
end

# Overwrite no command error to assume "name" is the default command and call
# it with the correct argument. This maintains the existing CLI behavior from
# before using Thor
class Thor
  module Base
    module ClassMethods
      def handle_no_command_error(command, has_namespace = $thor_runner) #:nodoc:
        SrchCLI.start(ARGV.unshift("name"))
      end
    end
  end
end

class SrchCLI < Thor
  desc "exec COMMAND PATTERN", "execute shell command on all logfiles whose name matches PATTERN"
  def exec(command, pattern)
    results = Srch.find_matching_logfiles(pattern)
    cont = yes?("Do you want to run '#{command}' on #{results.size} logfiles? (y/n)")

    if cont
      puts "Executing commands:"
      results.each do |logfile|
        puts "  #{command} \"#{logfile.path}\"" 
        ret = `#{command} \"#{logfile.path}\"`
        puts ret if ret && ret != ""
      end
    end
  end 

  desc "fulltext PATTERN", "full text search for logfile lines matching PATTERN"
  option :recent, :type => :numeric, :aliases => :r
  def fulltext(pattern)
    recent = options[:recent] || Ndex.max_id
    print_header(
      "Full-text searching",
      "for \"#{pattern}\"",
      options[:recent] ? Ndex.max_id - recent : nil
    )

    matches = Srch.text(pattern, recent).each_pair do |logfile, lines| 
      puts logfile.pp.ljust(width).black.on_white

      odd_line = true
      lines.each do |line|
        print_str = "#{line}\n\n"

        if odd_line
          puts print_str
        else
          puts print_str.on_black
        end

        odd_line = !odd_line
      end
    end
  end
  map "text" => :fulltext
  map "ftext" => :fulltext

  desc "name PATTERN", "list logfiles whose name matches PATTERN"
  option :recent, :type => :numeric, :aliases => :r
  def name(pattern)
    recent = options[:recent] || Ndex.max_id
    print_header(
      "Searching",
      "for filename \"#{pattern}\"",
      options[:recent] ? Ndex.max_id - recent : nil
    )

    Srch.print_matching_logfiles(pattern, recent)
  end
  map "find" => :name
end

SrchCLI.start(ARGV)
